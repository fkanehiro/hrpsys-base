// -*- coding:utf-8-unix; mode: idl; indent-tabs-mode: nil; c-basic-offset: 2; -*-
/**
 * @file ImpedanceControllerService.idl
 * @brief Services for the impedance controller interface
 */
module OpenHRP
{
  
  interface ImpedanceControllerService
  {
    typedef sequence<double, 3> DblSequence3;
    typedef double DblArray3[3];
    typedef sequence<double> DblSequence;
    typedef sequence<string> StrSequence;
    typedef sequence<sequence<double, 3> > Dbl3Sequence;

    /**
     * @enum ControllerMode
     * @brief Mode of controller
     */
    enum ControllerMode {
      MODE_IDLE,
      MODE_IMP
    };

    /**
     * @struct impedanceParam
     * @brief Impedance controller parameters for one end-effector.
     */
    struct impedanceParam {
      /// Position mass [N/(m/s^2)]
      double M_p;
      /// Position damper [N/(m/s)]
      double D_p;
      /// Position spring [N/m]
      double K_p;
      /// Rotation mass [Nm/(rad/s^2)]
      double M_r;
      /// Rotation damper [N/(rad/s)]
      double D_r;
      /// Rotation spring [N/rad]
      double K_r;
      /// Force gain (x,y,z).
      DblSequence3 force_gain;
      /// Moment gain (x,y,z).
      DblSequence3 moment_gain;
      /// SR-inverse gain for inverse kinematics.
      double sr_gain;
      /// Avoid joint limit gain for inverse kinematics.
      double avoid_gain;
      /// Reference joint angles tracking gain for inverse kinematics.
      double reference_gain;
      /// Manipulability limit for inverse kinematics.
      double manipulability_limit;
      /// Controller mode.
      ControllerMode controller_mode;
      /// Joint weight for Inverse Kinematics calculation
      DblSequence ik_optional_weight_vector;
      /// Use StateHolder basePos and baseRpy?
      boolean use_sh_base_pos_rpy;
    };

    /**
     * @enum DetectorMode
     * @brief Mode of object turnaround detector
     */
    enum DetectorMode {
        MODE_DETECTOR_IDLE,
        MODE_STARTED,
        MODE_DETECTED,
        MODE_MAX_TIME
    };

    /**
     * @struct objectTurnaroundDetectorParam
     * @brief ObjectTurnaroundDetectorParam parameters
     */
    struct objectTurnaroundDetectorParam {
      /// Cutoff frequence for wrench value [Hz]
      double wrench_cutoff_freq;
      /// Cutoff frequence for dwrench value [Hz]
      double dwrench_cutoff_freq;
      /// Threshould for detection (0,1)
      double detect_ratio_thre;
      /// Threshould for starting detection (0,1)
      double start_ratio_thre;
      /// Axis
      DblArray3 axis;
    };

    /**
     * @brief start impedance controller with waiting for transition.
     * @param name impedance controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean startImpedanceController(in string name);

    /**
     * @brief start impedance controller without waiting for transition.
     * @param name impedance controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean startImpedanceControllerNoWait(in string name);

    /**
     * @brief stop impedance controller with waiting for transition.
     * @param name impedance controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean stopImpedanceController(in string name);

    /**
     * @brief stop impedance controller without waiting for transition.
     * @param name impedance controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean stopImpedanceControllerNoWait(in string name);

    /**
     * @brief set impedance parameters.
     * @param i_param input new impedance parameters
     * @param name impedance controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean setImpedanceControllerParam(in string name, in impedanceParam i_param);

    /**
     * @brief get impedance parameters.
     * @param i_param ouput impedance parameters
     * @param name impedance controller param's name, which basically corresponds to force sensor name
     * @return true if set successfully, false otherwise
     */
    boolean getImpedanceControllerParam(in string name, out impedanceParam i_param);

    /**
     * @brief wait for impedance controller mode transition.
     * @param name impedance controller param's name, which basically corresponds to force sensor name
     */
    void waitImpedanceControllerTransition(in string name);

    /**
     * @brief Start ObjectTurnaroundDetector.
     * @param ref_diff_wrench is force or moment value.
     * @param max_time is max time [s].
     * @param i_ee_names is list of end effector
     */
    void startObjectTurnaroundDetection(in double i_ref_diff_wrench, in double i_max_time, in StrSequence i_ee_names);

    /**
     * @brief Check ObjectTurnaroundDetector.
     */
    DetectorMode checkObjectTurnaroundDetection();

    /**
     * @brief set object turnaround detector parameters.
     * @param i_param input new parameters
     * @return true if set successfully, false otherwise
     */
    boolean setObjectTurnaroundDetectorParam(in objectTurnaroundDetectorParam i_param);

    /**
     * @brief get object turnaround detector parameters.
     * @param i_param input new parameters
     * @return true if set successfully, false otherwise
     */
    boolean getObjectTurnaroundDetectorParam(out objectTurnaroundDetectorParam i_param);

    /**
     * @brief get Current force and moment for object
     * @param i_param output force and moment
     * @return true if set successfully, false otherwise
     */
    boolean getObjectForcesMoments(out Dbl3Sequence o_forces, out Dbl3Sequence o_moments);
  };
};
