/**
 * @file ImpedanceControllerService.idl
 * @brief Services for the impedance controller interface
 */
module OpenHRP
{
  
  interface ImpedanceControllerService
  {
    typedef sequence<double, 3> DblSequence3;

    /**
     * @struct impedanceParam
     * @brief Impedance controller parameters for one end-effector.
     */
    struct impedanceParam {
      /// Name of inverse kinematics root link.
      string base_name;
      /// Name of inverse kinematics end effector link.
      string target_name;
      /// Position mass [N/(m/s^2)]
      double M_p;
      /// Position damper [N/(m/s)]
      double D_p;
      /// Position spring [N/m]
      double K_p;
      /// Rotation mass [Nm/(rad/s^2)]
      double M_r;
      /// Rotation damper [N/(rad/s)]
      double D_r;
      /// Rotation spring [N/rad]
      double K_r;
      /// Force gain (x,y,z).
      DblSequence3 force_gain;
      /// Moment gain (x,y,z).
      DblSequence3 moment_gain;
      /// SR-inverse gain for inverse kinematics.
      double sr_gain;
      /// Avoid joint limit gain for inverse kinematics.
      double avoid_gain;
      /// Reference joint angles tracking gain for inverse kinematics.
      double reference_gain;
      /// Manipulability limit for inverse kinematics.
      double manipulability_limit;
    };

    /**
     * @brief set impedance parameters.
     * @param i_param new impedance parameters
     * @return true if set successfully, false otherwise
     */
    boolean setImpedanceControllerParam(in string name, in impedanceParam i_param);

    /**
     * @brief get impedance parameters.
     * @param name is name of the impedance parameter set and i_param output impedance parameters
     * @return true if set successfully, false otherwise
     */
    boolean getImpedanceControllerParam(in string name, out impedanceParam i_param);

    /**
     * @brief remove impedance parameters.
     * @param name name of the impedance parameter set
     * @return true if set successfully, false otherwise
     */
    boolean deleteImpedanceController(in string name);

    /**
     * @brief wait to finish deleting the impedance param object.
     * @param name name of the impedance parameter set
     */
    void waitDeletingImpedanceController(in string name);

    /**
     * @brief remove impedance parameters and wait to finish deleting the impedance param object.
     * @param name name of the impedance parameter set
     * @return true if set successfully, false otherwise
     */
    boolean deleteImpedanceControllerAndWait(in string name);
  };
};
