/**
 * @file ObjectContactTurnaroundDetectorService.idl
 * @brief Services for the object contact turnaround detector interface
 */
module OpenHRP {
  interface ObjectContactTurnaroundDetectorService {
    typedef sequence<double, 3> DblSequence3;
    typedef double DblArray3[3];
    typedef sequence<string> StrSequence;
    typedef sequence<sequence<double, 3> > Dbl3Sequence;

    /**
     * @enum DetectorMode
     * @brief Mode of object contact turnaround detector
     */
    enum DetectorMode {
      MODE_DETECTOR_IDLE,
      MODE_STARTED,
      MODE_DETECTED,
      MODE_MAX_TIME
    };

    /**
     * @enum DetectorTotalWrench
     * @brief Flag for whether total force or total moment is checked.
     */
    enum DetectorTotalWrench { TOTAL_FORCE, TOTAL_MOMENT };

    /**
     * @struct objectContactTurnaroundDetectorParam
     * @brief ObjectContactTurnaroundDetectorParam parameters
     */
    struct objectContactTurnaroundDetectorParam {
      /// Cutoff frequence for wrench value [Hz]
      double wrench_cutoff_freq;
      /// Cutoff frequence for dwrench value [Hz]
      double dwrench_cutoff_freq;
      /// Threshould for detection (0,1)
      double detect_ratio_thre;
      /// Threshould for starting detection (0,1)
      double start_ratio_thre;
      /// Threshould for time [s] after the first object contact turnaround
      /// detection (Wait detect_time_thre [s] after first object contact
      /// turnaround detection).
      double detect_time_thre;
      /// Threshould for time [s] after the first starting detection (Wait
      /// start_time_thre [s] after first start detection).
      double start_time_thre;
      /// Axis
      DblArray3 axis;
      /// Moment center [m] from foot mid frame (middle frame of rleg and lleg)
      DblArray3 moment_center;
      /// Current flag for whether total force or total moment is checked.
      DetectorTotalWrench detector_total_wrench;
    };

    /**
     * @brief Start ObjectContactTurnaroundDetector.
     * @param ref_diff_wrench is force or moment value.
     * @param max_time is max time [s].
     * @param i_ee_names is list of end effector
     */
    void startObjectContactTurnaroundDetection(in double i_ref_diff_wrench,
                                               in double i_max_time,
                                               in StrSequence i_ee_names);

    /**
     * @brief Check ObjectContactTurnaroundDetector.
     */
    DetectorMode checkObjectContactTurnaroundDetection();

    /**
     * @brief set object contact turnaround detector parameters.
     * @param i_param input new parameters
     * @return true if set successfully, false otherwise
     */
    boolean setObjectContactTurnaroundDetectorParam(
        in objectContactTurnaroundDetectorParam i_param);

    /**
     * @brief get object contact turnaround detector parameters.
     * @param i_param input new parameters
     * @return true if set successfully, false otherwise
     */
    boolean getObjectContactTurnaroundDetectorParam(
        out objectContactTurnaroundDetectorParam i_param);

    /**
     * @brief get Current force and moment for object
     * @param i_param output force and moment
     * @return true if set successfully, false otherwise
     */
    boolean getObjectForcesMoments(out Dbl3Sequence o_forces,
                                   out Dbl3Sequence o_moments,
                                   out DblSequence3 o_3dofwrench);
  };
};
