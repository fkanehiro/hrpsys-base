#!/usr/bin/env python

try:
    from hrpsys.hrpsys_config import *
    import OpenHRP
except:
    print("import without hrpsys")
    import rtm
    from rtm import *
    from OpenHRP import *
    import waitInput
    from waitInput import *
    import socket
    import time

import math
import matplotlib.pyplot as plt

def init ():
    global hcf
    hcf = HrpsysConfigurator()
    hcf.getRTCList = hcf.getRTCListUnstable
    hcf.init ("Sample6dofRobot(Robot)0", "@CMAKE_INSTALL_PREFIX@/share/hrpsys/samples/Sample6dofRobot/Sample6dofRobot.wrl")

def test_kf_plot (time, av1, av2, av3, optional_out_file_name): # time [s]
    hcf.seq_svc.setJointAngles(av3, 0.2)
    hcf.seq_svc.waitInterpolation()
    hcf.kf_svc.resetKalmanFilterState()
    hcf.log_svc.clear()
    hcf.seq_svc.setJointAngles(av1, time*0.25)
    hcf.seq_svc.waitInterpolation()
    hcf.seq_svc.setJointAngles(av2, time*0.5)
    hcf.seq_svc.waitInterpolation()
    hcf.seq_svc.setJointAngles(av3, time*0.25)
    hcf.seq_svc.waitInterpolation()
    hcf.log_svc.save("/tmp/test-kf-sample6dofrobot-{0}s".format(time))
    kf_ret=[]
    for line in open("/tmp/test-kf-sample6dofrobot-{0}s.kf_rpy".format(time), "r"):
        kf_ret.append(line.split(" ")[0:-1])
    #  Actual rpy from simualtor : time, posx, posy, posz, roll, pitch, yaw
    act_rpy_ret=[]
    for line in open("/tmp/test-kf-sample6dofrobot-{0}s.Sample6dofRobot(Robot)0_WAIST".format(time), "r"):
        act_rpy_ret.append(line.split(" ")[0:-1])
    initial_sec=int(act_rpy_ret[0][0].split(".")[0])
    tm_list=[int(x[0].split(".")[0])-initial_sec + float(x[0].split(".")[1]) * 1e-6 for x in act_rpy_ret]
    plt.clf()
    for idx in range(3):
        plt.plot(tm_list, [180.0 * float(x[4+idx]) / math.pi for x in act_rpy_ret])
        plt.plot(tm_list, [180.0 * float(x[1+idx]) / math.pi for x in kf_ret], ":")
    plt.xlabel("Time [s]")
    plt.ylabel("Angle [deg]")
    plt.title("KF actual-estimated data (motion time = {0}[s], {1})".format(time,optional_out_file_name))
    plt.legend(("Actual roll", "Estimated roll",
                "Actual pitch", "Estimated pitch",
                "Actual yaw", "Estimated yaw"), loc=0)
    plt.savefig("/tmp/test-kf-sample6dofrobot-data-{0}s-{1}.eps".format(time,optional_out_file_name))

def demo():
    init()
    hcf.seq_svc.setJointAngles([0,0,0,0,0,0], 2.5)
    hcf.seq_svc.waitInterpolation()

    # 1. getParameter
    ret=hcf.kf_svc.getKalmanFilterParam()
    if ret[0]:
        print("getKalmanFilterParam() => OK")
    # 2. setParameter
    kfp=hcf.kf_svc.getKalmanFilterParam()[1]
    kfp.Q_angle = 0.001;
    kfp.Q_rate = 0.003;
    kfp.R_angle = 1000;
    ret=hcf.kf_svc.setKalmanFilterParam(kfp)
    kfp2=hcf.kf_svc.getKalmanFilterParam()[1]
    if ret and kfp.Q_angle == kfp2.Q_angle and kfp.Q_rate == kfp2.Q_rate and kfp.R_angle == kfp2.R_angle:
        print("setKalmanFilterParam() => OK")

    # 3. check log and plot
    offset = math.radians(85)   # we need this because we rotate waist of this robot in xml file.
    for tm in [4, 1]:
        test_kf_plot(tm, [0,0,0,0,1-offset,0],   [0,0,0,0,-1-offset,0],    [0,0,0,0,0-offset,0],   "r0-ptest")
        test_kf_plot(tm, [0,0,0,0,1-offset,0.8], [0,0,0,0,-1-offset,0.8],  [0,0,0,0,0-offset,0.8], "r1-ptest")
        test_kf_plot(tm, [0,0,0,0,0-offset,0.8], [0,0,0,0,0-offset,-0.8],  [0,0,0,0,0-offset,0],   "p0-rtest")
        test_kf_plot(tm, [0,0,0,0,1-offset,0.8], [0,0,0,0,1-offset,-0.8],  [0,0,0,0.0,1-offset,0], "p1-rtest")
        test_kf_plot(tm, [0,0,0,0,1-offset,0.8], [0,0,0,0,-1-offset,-0.8], [0,0,0,0,0-offset,0],   "rptest")

    # 4. check singularity
    for alg in [OpenHRP.KalmanFilterService.RPYKalmanFilter, OpenHRP.KalmanFilterService.QuaternionExtendedKalmanFilter]:
        kfp.kf_algorithm = alg
        hcf.kf_svc.setKalmanFilterParam(kfp)
        test_kf_plot(3, [0,0,0,0,math.radians(90),0],   [0,0,0,0,math.radians(-90),0],    [0,0,0,0,0,0],   "singularity-test-pitch-"+str(alg))
        test_kf_plot(3, [0,0,0,math.radians(90),0,0],   [0,0,0,math.radians(-90),0,0],    [0,0,0,0,0,0],   "singularity-test-yaw-"+str(alg))
