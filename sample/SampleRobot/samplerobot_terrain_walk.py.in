#!/usr/bin/env python

try:
    from hrpsys.hrpsys_config import *
    import OpenHRP
except:
    print "import without hrpsys"
    import rtm
    from rtm import *
    from OpenHRP import *
    import waitInput
    from waitInput import *
    import socket
    import time

def init ():
    global hcf
    hcf = HrpsysConfigurator()
    hcf.getRTCList = hcf.getRTCListUnstable
    hcf.init ("SampleRobot(Robot)0", "@OPENHRP_DIR@/share/OpenHRP-3.1/sample/model/sample1.wrl")

def initPose():
    initial_pose=[0.0,-0.582916,0.0,1.35776,-0.774841,0.0,0.523599,0.0,0.0,-1.0472,0.15708,-0.113446,0.637045,0.0,-0.582916,0.0,1.35776,-0.774841,0.0,0.523599,0.0,0.0,-1.0472,-0.15708,-0.113446,-0.637045,0.0,0.0,0.0]
    hcf.seq_svc.setJointAngles(initial_pose, 1.0)
    hcf.seq_svc.waitInterpolation()

def demo():
    init()
    initPose()
    print "Please execute 'demoStairUp()', 'demoStairDown()', 'demoStairUpDown()', and 'demoSlopeUpDown()'"

def setupGaitGeneratorParam(use_rectangle=True):
    ggp = hcf.abc_svc.getGaitGeneratorParam()
    ggp[1].default_double_support_ratio = 0.3
    ggp[1].default_step_time = 1.2
    #ggp[1].swing_trajectory_delay_time_offset = 0.2;
    if use_rectangle:
        ggp[1].default_orbit_type = OpenHRP.AutoBalancerService.RECTANGLE;
    else:
        ggp[1].default_orbit_type = OpenHRP.AutoBalancerService.STAIR;
        #ggp[1].stair_trajectory_way_point_offset = [0.04,0,0];
    hcf.abc_svc.setGaitGeneratorParam(ggp[1])

def stairWalk(stair_height = 0.1524):
    stair_stride_x = 0.25
    floor_stride_x = 0.16
    init_step_x = 0
    init_step_z = 0
    for step_idx in [1,2,3,4]:
        setupGaitGeneratorParam(step_idx%2==1)
        hcf.abc_svc.setFootSteps([OpenHRP.AutoBalancerService.Footstep([init_step_x, -0.09, init_step_z], [1,0,0,0], "rleg"),
                                  OpenHRP.AutoBalancerService.Footstep([init_step_x+stair_stride_x, 0.09, init_step_z+stair_height], [1,0,0,0], "lleg")])
        hcf.abc_svc.waitFootSteps()
        hcf.abc_svc.setFootSteps([OpenHRP.AutoBalancerService.Footstep([init_step_x+stair_stride_x, 0.09, init_step_z+stair_height], [1,0,0,0], "lleg"),
                                  OpenHRP.AutoBalancerService.Footstep([init_step_x+stair_stride_x, -0.09, init_step_z+stair_height], [1,0,0,0], "rleg")])
        hcf.abc_svc.waitFootSteps()
        hcf.abc_svc.setFootSteps([OpenHRP.AutoBalancerService.Footstep([init_step_x+stair_stride_x, 0.09, init_step_z+stair_height], [1,0,0,0], "lleg"),
                                  OpenHRP.AutoBalancerService.Footstep([init_step_x+stair_stride_x+floor_stride_x, -0.09, init_step_z+stair_height], [1,0,0,0], "rleg"),
                                  OpenHRP.AutoBalancerService.Footstep([init_step_x+stair_stride_x+floor_stride_x, 0.09, init_step_z+stair_height], [1,0,0,0], "lleg")])
        hcf.abc_svc.waitFootSteps()
        init_step_x = init_step_x + stair_stride_x + floor_stride_x
        init_step_z = init_step_z + stair_height

# sample for SampleRobot.TerrainFloor.SlopeUpDown.xml
def demoSlopeUpDown():
    print "Start stlop up down"
    setupGaitGeneratorParam()
    hcf.abc_svc.startAutoBalancer(["rleg", "lleg"]);
    fsList=[OpenHRP.AutoBalancerService.Footstep([0.8,-0.09,0.0], [1.0,0.0,2.775558e-17,0.0], "rleg"), OpenHRP.AutoBalancerService.Footstep([1.0953,0.09,0.030712], [0.991445,0.0,-0.130526,0.0], "lleg"), OpenHRP.AutoBalancerService.Footstep([1.28848,-0.09,0.082475], [0.991445,0.0,-0.130526,0.0], "rleg"), OpenHRP.AutoBalancerService.Footstep([1.38508,0.09,0.108357], [0.991445,0.0,-0.130526,0.0], "lleg"), OpenHRP.AutoBalancerService.Footstep([1.38508,-0.09,0.108357], [0.991445,0.0,-0.130526,0.0], "rleg"), OpenHRP.AutoBalancerService.Footstep([1.54959,0.09,0.125863], [0.991445,0.0,0.130526,0.0], "lleg"), OpenHRP.AutoBalancerService.Footstep([1.74277,-0.09,0.074099], [0.991445,0.0,0.130526,0.0], "rleg"), OpenHRP.AutoBalancerService.Footstep([1.79107,0.09,0.061158], [0.991445,0.0,0.130526,0.0], "lleg"), OpenHRP.AutoBalancerService.Footstep([2.05,-0.09,0.0], [1.0,0.0,0.0,0.0], "rleg"), OpenHRP.AutoBalancerService.Footstep([2.05,0.09,0.0], [1.0,0.0,0.0,0.0], "lleg")]
    # set st Parameter
    # stp1 = hcf.st_svc.getParameter()
    # stp1.k_tpcc_p=[0.05, 0.05]
    # stp1.k_tpcc_x=[4.0, 4.0]
    # stp1.k_brot_p=[0.0, 0.0]
    # hcf.st_svc.setParameter(stp1)
    # hcf.st_svc.startStabilizer ()
    for idx in range(len(fsList)-1):
        hcf.abc_svc.setFootSteps([fsList[idx],fsList[idx+1]])
        hcf.abc_svc.waitFootSteps()
    hcf.abc_svc.stopAutoBalancer();

# sample for SampleRobot.TerrainFloor.StairUp.xml
def demoStairUp():
    print "Start stair up"
    hcf.abc_svc.startAutoBalancer(["rleg", "lleg"]);
    stairWalk()
    hcf.abc_svc.stopAutoBalancer();

# sample for SampleRobot.TerrainFloor.StairDown.xml
def demoStairDown():
    print "Start stair down"
    hcf.abc_svc.startAutoBalancer(["rleg", "lleg"]);
    stairWalk(-0.1524)
    hcf.abc_svc.stopAutoBalancer();

def demoStairUpDown():
    print "Start stair up"
    hcf.abc_svc.startAutoBalancer(["rleg", "lleg"]);
    stairWalk()
    hcf.abc_svc.goPos(0.05, 0.0, 0.0)
    hcf.abc_svc.waitFootSteps()
    print "Start stair down"
    stairWalk(-0.1524)
    hcf.abc_svc.stopAutoBalancer();
